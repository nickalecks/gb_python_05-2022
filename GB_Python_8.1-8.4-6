# Задание №1

from datetime import date


class Data:
    def __init__(self, data):
        self.data = data.split('-')

    @classmethod
    def type(cls, data):
        try:
            day, month, year = [int(i) for i in data.split('-')]
            return f"{type(day), day}\n{type(month), month}\n{type(year), year}"
        except ValueError:
            return 'Дата указана неправильно!'

    @staticmethod
    def valid(data):
        try:
            day, month, year = data.split('-')
            date(int(year), int(month), int(day))
            return 'Дата указана правильно!'
        except ValueError:
            return 'Дата указана неправильно!'


print(Data.valid('29-06-2022'))
print(Data.type('29-2022'))

# Задание №2

class MyError(Exception):
    def __init__(self, txt):
        self.txt = txt


def div():
    try:
        user_num_1 = int(input('Введите делимое: '))
        user_num_2 = int(input('Введите делитель: '))
        if user_num_2 == 0:
            raise MyError("Делить на ноль нельзя!")
        else:
            res = user_num_1 / user_num_2
            return res
    except ValueError:
        return "Вы ввели не число"
    except MyError as err:
        return err


print(div())


# Задание №3

class MyError(Exception):
    def __init__(self):
        pass

class TypeCheck:
    def __init__(self):
        self.my_list = []

    def check_value(self):
        global user_val
        while True:
            try:
                try:
                    user_val = int(input('Введите число: '))
                    ex = input(f'Число {user_val} добавлено в список, продолжать будем? y/n: ').lower()
                    self.my_list.append(user_val)
                    if ex == 'n':
                        print(f'То, что вы вводили: {self.my_list}')
                        break
                except ValueError:
                    raise MyError
            except MyError:
                ex = input(f'Это не число! Продолжать будем? y/n: ').lower()
                if ex == 'n':
                    print(self.my_list)
                    break
                else:
                    self.check_value()


a = TypeCheck()
a.check_value()

# Задание №4-6

class OfficeStore:

    def __init__(self, name, quantity, price):
        self.name = name
        self.quantity = quantity
        self.price = price
        self.items = {'Модель устройства': self.name, 'Количество': self.quantity, 'Цена за шт.': self.price}

    def entry(self):
        try:
            name = input(f'Введите наименование: ')
            quantity = int(input(f'Введите количество: '))
            price = int(input(f'Введите цену: '))
            item = {'Модель устройства': name, 'Количество': quantity, 'Цена за шт.': price}
            self.items.update(item)
            print(self.items)
        except ValueError:
            print('Недопустимое значение!')


class Printer(OfficeStore):
    pass


class Scanner(OfficeStore):
    pass


class Xerox(OfficeStore):
    pass

p = Printer('Epson', 3250, 4)
s = Scanner('KIP', 2, 4800)
x = Xerox('HP', 1, 1600)
p.entry()
s.entry()
x.entry()




